/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package socketprogrammingserver;

import com.sun.glass.ui.View;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

/**
 *
 * @author maghfirohlutfi
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        historiTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pesanTextArea = new javax.swing.JTextArea();
        kirimButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ServerSide: LUTFI");

        jLabel2.setText("Port:");

        jButton1.setText("Hapus histori");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Buka");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("histori pesan"));

        historiTextArea.setEditable(false);
        historiTextArea.setColumns(20);
        historiTextArea.setRows(5);
        historiTextArea.setText("buka port dan tunggu client terhubung");
        jScrollPane2.setViewportView(historiTextArea);

        jLabel1.setText("Tulis Pesan:");

        pesanTextArea.setColumns(20);
        pesanTextArea.setRows(5);
        jScrollPane3.setViewportView(pesanTextArea);

        kirimButton.setText("Kirim");
        kirimButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kirimButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(153, 153, 153)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addGap(0, 223, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kirimButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jLabel2)
                    .addGap(6, 6, 6)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(306, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(kirimButton))
                .addGap(1, 1, 1)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(272, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private static ServerSocket serverSocket = null;
    private static Socket clientSocket = null;
    private static PrintWriter out;
    private static BufferedReader in;
    private static BufferedReader stdIn;
    private static final ArrayList<ServerControl> clientList = new ArrayList<ServerControl>();
    int clientNb = 0;
    Integer portNumber = null;

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
//        historiTextArea.append("Tunggu client tersambung"+"\n");
//        historiTextArea.updateUI();
        String port = portTextField.getText();
        Boolean portOK = cekAngkaPort(port);
        System.out.println(portOK);
        if (portOK) {
            portNumber = Integer.valueOf(port);
            try {

                serverSocket = new ServerSocket(portNumber);
                historiTextArea.append("\nPort Server " + portNumber + " telah dibuka" + "\n");
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            while (true) {
                                clientSocket = serverSocket.accept();
                                ServerControl sc = new ServerControl(clientSocket, clientNb++);
                                clientList.add(sc);
                                historiTextArea.append("\nClient #" + clientNb + " terhubung ke server" + "\n");

                            }
                        } catch (IOException ex) {
                            logText(ex.getMessage());
                        }
                    }
                }.start();

            } catch (IOException ex) {
                logText("Exception caught when trying to listen on port "
                        + portNumber + " or listening for a connection" + "\n");
                logText(ex.getMessage() + "\n");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private static String send(String pilihan) {
        String everything = null;
        if ("0".equals(pilihan.trim())) {
            everything = "0.Menu\n"
                    + "1.Lutfi.xml\n"
                    + "2.Febri.txt\n"
                    + "3.Family.sql";
        } else if ("1".equals(pilihan.trim())) {
            try (BufferedReader br = new BufferedReader(new FileReader("src\\socketprogrammingserver\\Lutfi.xml"))) {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                everything = sb.toString();
            } catch (Exception ex) {
                everything = "0.Menu\n"
                        + "1.Lutfi.xml\n"
                        + "2.Febri.txt\n"
                        + "3.Family.sql";
            }

        } else if ("2".equals(pilihan.trim())) {
            try (BufferedReader br = new BufferedReader(new FileReader("src\\socketprogrammingserver\\Febri.txt"))) {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                everything = sb.toString();
            } catch (Exception ex) {
                everything = "0.Menu\n"
                        + "1.Lutfi.xml\n"
                        + "2.Febri.txt\n"
                        + "3.Family.sql";
            }

        } else if ("3".equals(pilihan.trim())) {
            try (BufferedReader br = new BufferedReader(new FileReader("src\\socketprogrammingserver\\Family.sql"))) {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                everything = sb.toString();
            } catch (Exception ex) {
                everything = "0.Menu\n"
                        + "1.Lutfi.xml\n"
                        + "2.Febri.txt\n"
                        + "3.Family.sql";
            }

        } else {
            everything = "0.Menu\n"
                    + "1.Lutfi.xml\n"
                    + "2.Febri.txt\n"
                    + "3.Family.sql";

        }

        return everything;
    }

    private void kirimButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kirimButtonActionPerformed
//        try {
//            out = new PrintWriter(clientSocket.getOutputStream(), true);
        String userInput = pesanTextArea.getText();
        for (ServerControl sc : clientList) {
            System.out.println(sc.clientNo);
            try {
                sc.kirimPesan(userInput);
                System.out.println(sc.sockets);
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                ex.getMessage();
            }
        }
        pesanTextArea.setText("");
        pesanTextArea.selectAll();
    }//GEN-LAST:event_kirimButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        historiTextArea.setText(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea historiTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton kirimButton;
    private javax.swing.JTextArea pesanTextArea;
    private javax.swing.JTextField portTextField;
    // End of variables declaration//GEN-END:variables

    private Boolean cekAngkaPort(String port) {
        try {
            Integer.valueOf(port);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public void logText(final String pesan) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                historiTextArea.append(pesan);
            }
        });
    }

    private class ServerControl {

        private Socket sockets;
        private int clientNo;

        public ServerControl(final Socket socket, final int clientNo) {
            this.sockets = socket;
            this.clientNo = clientNo;
            log("New connection with client# " + clientNo + " at " + socket);
            new Thread() {
                @Override
                public void run() {
                    try {
                        ins = new BufferedReader(
                                new InputStreamReader(socket.getInputStream()));
                        outs = new PrintWriter(socket.getOutputStream(), true);

                        outs.println("Hello, you are client #" + clientNo + ".");
                        outs.println("Enter a line with only a period to quit");

                        new Thread() {
                            @Override
                            public void run() {
                                try {
                                    String inputLine;
                                    while ((inputLine = ins.readLine()) != null) {
                                        historiTextArea.append("Febri #" + clientNo + ": " + inputLine + "\n");
                                        if ("0".equals(inputLine) || "1".equals(inputLine) || "2".equals(inputLine) || "3".equals(inputLine)) {
                                            String s = send(inputLine);
                                            outs.println(s);
                                        }
                                    }
                                } catch (IOException ex) {
                                    log(ex.getMessage());
                                } finally {
                                    try {
                                        clientSocket.close();
                                    } catch (IOException ex) {
                                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                        }.start();

                    } catch (IOException e) {
                        log("Error handling client# " + clientNo + ": " + e);
                    }
                }
            }.start();
        }

        BufferedReader ins = null;
        PrintWriter outs = null;

        private void kirimPesan(String pesan) throws IOException {
            if (pesan.trim() != null) {
                historiTextArea.append(pesan + "\n");
                outs.println(pesan);

            }
        }

        private void log(String message) {
            System.out.println(message);
        }
    }

}
